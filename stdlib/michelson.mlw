module Michelson
  use export int.Int
  use export int.EuclideanDivision
  use export option.Option
  use export list.List
  use export map.Map
  use export map.Const

  exception Insufficient_mutez
  exception Terminate

  scope Nat

    type t = { v : int } invariant { v >= 0 }

    let function mk (n : int) : t
      requires { n >= 0 }
      ensures { result.v = n }
      =
      { v = n }

    let function add (a : t) (b : t) : t
      ensures { result.v = a.v + b.v }
      =
      { v = a.v + b.v }

    let function sub (a : t) (b : t) : t
      requires { a.v >= b.v }
      ensures { result.v = a.v - b.v }
      =
      { v = a.v - b.v }

    let function mul (a : t) (b : t) : t
      ensures { result.v = a.v * b.v }
      =
      { v = a.v * b.v }

    let function div (a : t) (b : t) : t
      requires { b.v <> 0 }
      ensures { result.v = div a.v b.v }
      =
      { v = div a.v b.v }

    let function eq (a : t) (b : t) : bool
      ensures { result <-> a.v = b.v }
      =
      a.v = b.v

    let function lt (a : t) (b : t) : bool
      ensures { result <-> a.v < b.v }
      =
      a.v < b.v

    let function le (a : t) (b : t) : bool
      ensures { result <-> a.v <= b.v }
      =
      a.v <= b.v

  end

  scope Mutez

    type t = { v : int } invariant { v >= 0 }

    let function mk (n : int) : t
      requires { n >= 0 }
      ensures { result.v = n }
      =
      { v = n }

    let function add (a : t) (b : t) : t
      ensures { result.v = a.v + b.v }
      =
      { v = a.v + b.v }

    let function sub (a : t) (b : t) : t
      requires { a.v >= b.v }
      ensures { result.v = a.v - b.v }
      =
      { v = a.v - b.v }

    let function eq (a : t) (b : t) : bool
      ensures { result <-> a.v = b.v }
      =
      a.v = b.v

    let function lt (a : t) (b : t) : bool
      ensures { result <-> a.v < b.v }
      =
      a.v < b.v

    let function le (a : t) (b : t) : bool
      ensures { result <-> a.v <= b.v }
      =
      a.v <= b.v

  end

  type nat = Nat.t

  type mutez = Mutez.t

  type address = int

  type timestamp = int

  type or 'a 'b = Left 'a | Right 'b

  type step =
    { source : address;
      sender : address;
      self : address;
      amount : mutez
    }

  function mk_step (source : address) (sender : address) (self : address) (amount : mutez) : step =
    { source= source;
      sender= sender;
      self= self;
      amount= amount
    }

  predicate step_wf (st : step) = true

end
