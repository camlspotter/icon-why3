scope Preambles
  use export int.Int
  use export int.Abs
  use export int.EuclideanDivision
  use export list.List
  use export option.Option
  use export map.Map
  use export map.Const

  exception Insufficient_mutez
  exception Terminate

  function is_unit_wf () : bool = true

  type nat = int
  function is_nat_wf (x : nat) : bool = x >= 0
  
  type mutez = int
  function is_mutez_wf (x : mutez) : bool = x >= 0

  type address = int
  function is_address_wf (_ : address) : bool = true

  type key_hash = int
  function is_key_hash_wf (_ : key_hash) : bool = true

  type timestamp = int
  function is_timestamp_wf (_ : timestamp) : bool = true

  type contract 'a = int

  type or 'a 'b = Left 'a | Right 'b
  function is_or_wf (af : 'a -> bool) (bf : 'b -> bool) (x : or 'a 'b) : bool =
    match x with
    | Left a -> af a
    | Right b -> bf b
    end

  type step = (address, address, address, mutez)

  function mk_step (source : address) (sender : address) (self : address) (amount : mutez) : step =
    (source, sender, self, amount)

  function source (st : step) : address =
    match st with x, _, _, _ -> x end

  function sender (st : step) : address =
    match st with _, x, _, _ -> x end

  function self (st : step) : address =
    match st with _, _, x, _ -> x end

  function amount (st : step) : mutez =
    match st with  _, _, _, x -> x end

  predicate st_wf (st : step) =
    st.amount >= 0

end

scope Unknown

  predicate pre (_c : ctx) = true

  predicate post (c : ctx) (c' : ctx) =
    c.boomerang_balance = c'.boomerang_balance

  scope Entrypoint

  predicate default unit

  end

end

scope Boomerang

  type storage [@gen_wf] = unit

  predicate pre (_c : ctx) = true

  predicate post (_st : step) (_gp : gparam) (c : ctx) (c' : ctx) = inv_post c c'

  let upper_ops = 1

  scope Spec

  predicate default (st : step) (_p : unit) (_s : storage) (ops : list operation) (_s' : storage) =
    (st.amount = 0 -> ops = Nil) /\
    (st.amount > 0 -> ops = Cons (Xfer (Gp'Unknown'default ()) st.amount st.sender) Nil)

  end

end
